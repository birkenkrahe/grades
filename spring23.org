#+title: Spring 23 grades
#+property: header-args:R :session *R Grades* :results output :exports both :noweb yes
#+startup: overview hideblocks indent inlineimages
#+options: toc:1 num:1 ^:nil
* Introduction to programming CSC 100
** Test results

- This section contains visualization of test results for the
  Introduction to Programming class CSC 100 in Spring 2023.

- The visualizations were created with the statistical programming
  language R. If you want to know more about R or even learn it
  (fast), check out this excellent tutorial by Norm Matloff, "fasteR:
  Fast Lane to Learning R!" for non-computer scientists.

*** Getting and normalizing the data
- Enter vector data manually
- Non-writing participants are registered as ~NA~
- Tests carried different number of available points
- Rescaling with ~bruceR::scaler~ and default ~min=0~, ~max=1~ OR with
  ~normalize~, which implements min-max normalization:
  #+name: normalize
  #+begin_src R :results silent
    normalize <- function(x) {
      return ((x-min(x,na.rm=TRUE))/
              (max(x,na.rm=TRUE)-min(x,na.rm=TRUE)))
    }
  #+end_src
- Put test results in ~cc_tests~ dataframe
- Add ~cc_tests~ as ~tests~ to ~cc_results~ list
#+name: cc_data
#+begin_src R :exports both
  library(bruceR)
  <<normalize>>
  ## Test 1 had 12 points
  cc_test_1 <- scaler(c(8.83,7.5,8,7.33,
                        7.5,9.67,7.08,7.83,
                        7.17,8,7.67,6.83,
                        8.17))
  ## Test 2 had 10 points
  cc_test_2 <- scaler(c(15.65,18.5,7.25,10.04,
                        16.75,18.75,17.08,16.08,
                        14.48,17,14.48,13.36,
                        16.35))
  ## Test 3 had 13 points
  cc_test_3 <- scaler(c(10.75,11.75,4.5,NA,
                        NA,9,12.25,8.25,
                        9.25,12.25,11.25,5.75,
                        12.5))
  ## Test 4 had 10 points
  cc_test_4 <- scaler(c(NA,8.5,4.5,NA,
                        6.5,9.5,9,5,
                        8,10,9,NA,
                        7.5))
  cc_tests <- data.frame("t1"=cc_test_1,
                         "t2"=cc_test_2,
                         "t3"=cc_test_3,
                         "t4"=cc_test_4)
  str(cc_tests)
  summary(cc_tests)
  quantile(cc_tests,na.rm=TRUE)
  cc_results <- list("tests"=cc_tests)
#+end_src

#+RESULTS: cc_data
#+begin_example
'data.frame':	13 obs. of  4 variables:
 $ t1: num  0.704 0.236 0.412 0.176 0.236 ...
 $ t2: num  0.73 0.978 0 0.243 0.826 ...
 $ t3: num  0.781 0.906 0 NA NA ...
 $ t4: num  NA 0.727 0 NA 0.364 ...
       t1               t2               t3               t4        
 Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  
 1st Qu.:0.1761   1st Qu.:0.6287   1st Qu.:0.5156   1st Qu.:0.4091  
 Median :0.2958   Median :0.7678   Median :0.7812   Median :0.6818  
 Mean   :0.3464   Mean   :0.6791   Mean   :0.6591   Mean   :0.5909  
 3rd Qu.:0.4120   3rd Qu.:0.8478   3rd Qu.:0.9375   3rd Qu.:0.8182  
 Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  
                                   NA's   :2        NA's   :3
       0%       25%       50%       75%      100% 
0.0000000 0.2691917 0.6286957 0.8349185 1.0000000
#+end_example

*** Computing summaries
**** Arithmetic average
- Apply ~mean~ to ~cc_tests~ dataframe, remove ~NA~
- Normalize to percent with ~format~
- Save ~cc_tests_mean~ as ~numeric~
#+name: cc_averages
#+begin_src R :exports both
  cc_tests_mean <- format(sapply(X=cc_tests,
                                 FUN=mean,
                                 na.rm=TRUE)*100,
                          digits=4)
  cc_tests_mean <- as.numeric(cc_tests_mean)
  cc_tests_mean
#+end_src

#+RESULTS: cc_averages
: [1] 34.64 67.91 65.91 59.09

**** Density estimate
- Initialize empty ~list~ named ~cc_tests_density~
- Prepare 2 x 2 graph window
- Loop over tests and plot density estimates
#+name: cc_tests_density
#+begin_src R :results silent
  cc_tests_density <- list()
  for (i in 1:4) {
    cc_tests_density[[i]] <- density(cc_tests[[i]], na.rm=TRUE)
  }
#+end_src

*** Plotting the data

- Use computed averages for each results vector (without ~NA~)
- Determine min and max values for the plotting window
- Plot densities and averages and attach text labels
- Color palette are Illinsky and Steele's recommended colors (except
  white): red, green, yellow, blue, black, pink, cyan, gray, orange,
  brown, purple

**** Density estimates 2 x 2 windows
#+name: cc_test_density_plot_2x2
#+begin_src R :results graphics file :file ./img/ccTestsDensity2x2.png :exports both
  <<cc_test_density>>
  par(mfrow=c(2,2))
  for (i in 1:4) {
    plot(cc_tests_density[[i]],
         main=paste("Density estimate CC Test ",i))
  }
#+end_src

#+RESULTS: cc_test_density_plot_2x2
[[file:./img/ccTestsDensity2x2.png]]

**** Density estimates in one window
#+name: cc_density_plot
#+begin_src R :results graphics file :file ./img/ccTestDensity.png :exports both
  <<cc_test_averages>>
  <<cc_test_density>>
  farbe <- c("red", "green", "orange", "blue", "black",
             "pink", "cyan", "gray", "yellow", "brown", "purple")
  avgs <- rep(NA,ncol(cc_tests))  ## init vector for legend text
  par(mfrow=c(1,1))  ## 1 x 1 graph window
  for (i in 1:ncol(cc_tests)) {
    plot(cc_tests_density[[i]],
         col=farbe[i], lwd=2,
         xaxt="n",yaxt="n",xlab="",ylab="",
         main=paste("Density estimate CSC 100 Test 1-",ncol(cc_tests)))
    abline(v=cc_tests_mean[i]/100,   # display averages
           col=farbe[i], lty=3, lwd=2)
    avgs[i] <- c(paste("Test",i,":",  # define legend line
                       format(cc_tests_mean[i],digits=3),
                       "%"))
    par(new=TRUE) # plot next graph on top of previous graph
  }
  legend("topleft", legend=avgs, bty="n", lwd=2, col=farbe)
  axis(1, at=seq(from=-0.5,1.5,by=0.5),  # draw axis labels
       labels=c("bad", "not good", "ok", "good", "excellent"))
#+end_src

#+RESULTS: cc_density_plot
[[file:./img/ccTestDensity.png]]

**** Boxplots
#+name: cc_boxplot
#+begin_src R :results graphics file :file ccTestBox.png
  <<cc_test_averages>>
  farbe <- c("red", "green", "orange", "blue", "black",
             "pink", "cyan", "gray", "yellow", "brown", "purple")
  par(mfrow=c(ncol(cc_tests),1))  ## 1 x 1 graph window
  for (i in 1:ncol(cc_tests)) {
    boxplot(cc_tests[[i]],
            col=farbe[i],
            horizontal=TRUE,
            main=paste("Boxplots CSC 100 Test",i),
            xlab="")
    abline(v=cc_tests_mean[i]/100)   # display averages
  }
#+end_src

#+RESULTS: cc_boxplot
[[file:ccTestBox.png]]

** Mid-term grades
#+attr_latex: :width 400px
[[./img/sp23_cc_midterm.png]]

* Introduction to advanced data science DSC 205
** Test results
- This section contains visualization of test results for the
  "Introduction to advanced data science" class DSC 205 in
  Spring 2023.

*** Getting the data

- Enter vector data manually
- Non-writing participants are registered as ~NA~
- Tests carried different number of available points
#+name: ds2_data
#+begin_src R
  ## Test 1 had 12 points
  ds2_results_1 <- c(6.75, 9.25, 6.75, 7.25, 8.75, 7, 6, 8, NA)/12 * 100
  format(ds2_results_1,digits=3)
  ## Test 2 had 10 points
  ds2_results_2 <- c(7, 9.5, 10, 8.5, 10, 4, NA, 9, 9)/10 * 100
  format(ds2_results_2,digits=3)
#+end_src

#+RESULTS: ds2_data
: [1] "56.2" "77.1" "56.2" "60.4" "72.9" "58.3" "50.0" "66.7" "  NA"
: [1] " 70" " 95" "100" " 85" "100" " 40" " NA" " 90" " 90"

*** Plotting the data

Density distribution plotting:
- compute the averages for each results vector (without ~NA~)
- determine min and max values for the plotting window
- plot densities and averages and attach text labels
- Color palette are Illinsky and Steele's recommended colors (except
  white): red, green, yellow, blue, black, pink, cyan, gray, orange,
  brown, purple

  #+name: ds2_density
  #+begin_src R :file ./img/ds2TestSP23.png :results output graphics file :exports both
    ds2_avg_1 <- mean(ds2_results_1, na.rm=TRUE);
    ds2_density_1 <- density(ds2_results_1, na.rm=TRUE)
    ds2_avg_2 <- mean(ds2_results_2, na.rm=TRUE);
    ds2_density_2 <- density(ds2_results_2, na.rm=TRUE)
    plot(x=ds2_density_1, col="red", lwd=2,
         main="Test results DSC 205 - Spring 2023",
         xlab="Percentage (%)",
         xaxt="n",yaxt="n",ylab="")
    par(new=TRUE)
    plot(x=ds2_density_2, col="green", lwd=2,
         main="", xlab="", yaxt="n", ylab="")
    abline(v=ds2_avg_1, col="red", lty=3, lwd=2)
    abline(v=ds2_avg_2, col="green", lty=3, lwd=2)
    legend("topleft",
           legend=c(
             paste("Test 1 (",format(ds2_avg_1,digits=3),"%)"),
             paste("Test 2 (",format(ds2_avg_2,digits=3),"%)")),
           lwd=2, col=c(test1="red",
                        test2="green"),
           bty="n")
  #+end_src

  #+RESULTS: ds2_density
  [[file:./img/ds2TestSP23.png]]

** Mid-term grades
#+attr_latex: :width 400px
[[./img/sp23_ds2_midterm.png]]
* Machine learning DSC 305
** Test results
- This section contains visualization of test results for the
  "Machine Learning" class DSC 305 in Spring 2023.
** Mid-term grades
#+attr_latex: :width 400px
[[./img/sp23_ml_midterm.png]]

* Digital humanities CSC 105

- This section contains visualization of test results for the
  "Digital Humanities - Text mining" class CSC 105 in
  Spring 2023.

** Getting the data

- Enter vector data manually
- Non-writing participants are registered as ~NA~
- Tests carried different number of available points
#+name: tm_data
#+begin_src R
  ## Test 1 had 20 points
  tm_results_1 <- c(15.17,10.5,12,9.67,13.83)/20 * 100
  format(tm_results_1,digits=3)
#+end_src

#+RESULTS: tm_data
: [1] "75.8" "52.5" "60.0" "48.4" "69.2"

** Plotting the data

Density distribution plotting:
- compute the averages for each results vector (without ~NA~)
- determine min and max values for the plotting window
- plot densities and averages and attach text labels
- Color palette are Illinsky and Steele's recommended colors (except
  white): red, green, yellow, blue, black, pink, cyan, gray, orange,
  brown, purple

  #+name: tm_density
  #+begin_src R :file ./img/tmTestSP23.png :results output graphics file :exports both
    tm_avg_1 <- mean(tm_results_1, na.rm=TRUE);
    tm_density_1 <- density(tm_results_1, na.rm=TRUE)
    plot(x=tm_density_1, col="red", lwd=2,
         main="Test results CSC 105 - Spring 2023",
         xlab="Percentage (%)",
         ylab="",yaxt="n")
    abline(v=tm_avg_1, col="red", lty=3, lwd=2)
    legend("topleft",
           legend=c(
             paste("Test 1 (",format(tm_avg_1,digits=3),"%)")),
           lwd=2, col=c(test1="red"),
           bty="n")
  #+end_src

  #+RESULTS: tm_density
  [[file:./img/tmTestSP23.png]]
